\documentclass[landscape]{slides}

%%\usepackage{Sweave}
\newenvironment{thebibliography}{}

\SweaveOpts{engine=R, eps=FALSE, keep.source = TRUE}
<<setup, echo = FALSE, results = hide>>=
set.seed(290875)
options(prompt = "R> ")
options(SweaveHooks = list(mai = function() par(mai = par("mai") * c(1, 2.4,
1, 1)),
                           mai3 = function() par(mai = par("mai") * c(1, 2,
1, 1))))
library("rpart")
library("ipred")
library("partykit")
library("RWeka")
library("CHAID")
library("rJava")
@


\usepackage[coloremph,colorhighlight,LMU,printout]{RSlides}
\usepackage{url,listings}
\usepackage{SweaveSlides}
\usepackage{natbib}
\usepackage{amssymb}

\usepackage[utf8]{inputenc}

\usepackage{hyperref}

\newcommand{\pkg}[1]{\textbf{#1}}

%%\input{header}
\usepackage{amstext}

\setkeys{Gin}{height = 0.75\textheight}

\title{\pkg{partykit}: \\ A Toolbox for Recursive Partytioning}

\author{Torsten Hothorn \\ Ludwig-Maximilians-Universit\"at M\"unchen \vspace*{1cm} \\ 
        Achim Zeileis \\ WU Wirtschaftsuniversit\"at Wien}
\fancyfoot[L]{\tiny 2009-07-09} %%\copyright{} 2007 Friedrich Leisch
\fancyfoot[R]{\arabic{page}}

\sloppy

\begin{document}

\maketitle

\newslide{Trees in R}

The Machine Learning task view lists the following tree-related packages
\begin{compactitem}
\item \pkg{rpart} (CART)
\item \pkg{tree} (CART)
\item \pkg{mvpart} (multivariate CART)
\item \pkg{knnTree} (nearest-neighbor-based trees)
\item \pkg{RWeka} (J4.8, M5$^\prime$, LMT)
\item \pkg{LogicReg} (Logic Regression)
\item \pkg{BayesTree} (with Bayesian flavor)
\item \pkg{TWIX} (with extra splits)
\item \pkg{party} (conditional inference trees, model-based trees)
\item ...
\end{compactitem}

%% \newslide{}

In addition, some packages implementing ensemble methods 
are based on trees as well, for example
\begin{compactitem}
\item \pkg{randomForest} (CART-based random forests)
\item \pkg{randomSurvivalForest} (for censored responses)
\item \pkg{party} (conditional random forests)
\item \pkg{gbm} (tree-based gradient boosting)
\item \pkg{mboost} (model-based and tree-based gradient boosting)
\item ...
\end{compactitem}

These packages deal with very similar problems.
However, similar or even the same tasks are implemented
differently by each package. No code reuse takes place.

\newslide{Missing in Action}

Moreover, important methods in this field, mostly from the statistics literature,
are missing from the above list, for example
\begin{compactitem}
\item CHAID
\item FACT
\item QUEST
\item GUIDE
\item LOTUS
\item CRUISE
\item ...
\end{compactitem}

\newslide{Adding more Trees?}

It is hard to come up with implementations of new tree-based
algorithms, because one needs to take care not only
of fitting the tree but also of
\begin{itemize}
\item representing fitted trees,
\item printing trees,
\item plotting trees, and
\item computing predictions from trees.
\end{itemize}

\newslide{Wouldn't it be nice to...}

{\color{white} hansi \\}
... have a common infrastructure for
\begin{itemize}
\item representing fitted trees,
\item printing trees,
\item plotting trees, and
\item computing predictions from trees?
\end{itemize}

\newslide{R-Forge Package \pkg{partykit}}

{\color{white} hansi \\}
offers a unified approach to 
\begin{itemize}
\item representing fitted trees,
\item printing trees,
\item plotting trees, and
\item computing predictions from trees.
\end{itemize}

\newslide{Unified Representation of Trees}

The most important classes in \pkg{partykit} are 
\begin{description}
\item[\texttt{partysplit}:] binary, multiway and functional splits in ordered and unordered variables,
\item[\texttt{partynode}:] inner nodes containing splits, surrogate splits, kid nodes, and 
                           terminal nodes containing models or constant fits, 
\item[\texttt{party}:] trees (nodes and data).
\end{description}

The API essentially consists of the corresponding constructors.

\newslide{Methods}

Coercing: \\
\texttt{as.party.rpart}, \texttt{as.party.J48}, \texttt{as.party.pmmlTreeModel}

Inspecting: \\
\texttt{print.party}, \texttt{plot.party}, both are extensible

Computing: \\
\texttt{predict.party}, subset methods

\newslide{Example: Pretty rpart Trees}

<<ex-rpart, echo = TRUE>>=
data("GlaucomaM", package = "TH.data")
library("rpart")
g_rpart <- rpart(Class ~ ., data = GlaucomaM)
print(g_rpart)
@

\newpage

\begin{center}
<<ex-rpart-plot, echo = TRUE, fig = TRUE>>=
plot(g_rpart)
text(g_rpart)
@

\newpage

{\small
<<ex-rpart-partykit, echo = TRUE>>=
library("partykit")
g_party <- as.party(g_rpart)
print(g_party, header = FALSE)
@
}

\newpage

<<ex-rpart-partykit-plot1, echo = TRUE, fig = TRUE, width = 8>>=
plot(g_party, type = "simple")
@

\newpage
<<ex-rpart-partykit-plot2, echo = TRUE, fig = TRUE, width = 10, height = 8>>=
plot(g_party, type = "extended")
@
\end{center}

\newslide{Example: Fast Predictions}

<<ex-J48-partykit, echo = TRUE>>=
g_J48 <- J48(Class ~ ., data = GlaucomaM)
g_party <- as.party(g_J48)
nd <- GlaucomaM[rep(1:nrow(GlaucomaM), 100),]
system.time(p1 <- predict(g_J48, newdata = nd))
system.time(p2 <- predict(g_party, newdata = nd))
table(p1, p2)
@

\newslide{Example: CHAID}

\pkg{partykit} makes it `easy' to implement new or old tree algorithms.

My students implemented CHAID as a software project last winter. \\
I wanted them to focus on the algorithm, not on technical details. 

They only had to implement variable selection, splitting and stopping rules,
\pkg{partykit} takes care of the rest.

The resulting package \pkg{CHAID} is available from R-Forge and
consists of only 362 lines of R code and was validated against SPSS 15.

\newpage

Fit a CHAID tree to BreastCancer data from package \pkg{mlbench}:

\small{
<<ex-CHAID, echo = TRUE>>=
data("BreastCancer", package = "mlbench")
library("CHAID")
b_chaid <- chaid(Class ~ Cl.thickness + Cell.size + Cell.shape + 
                  Marg.adhesion + Epith.c.size + Bare.nuclei + 
                  Bl.cromatin + Normal.nucleoli + Mitoses, 
                  data = BreastCancer)
@
}

\begin{center}
<<ex-CHAID-plot, echo = TRUE, fig = TRUE, width = 17, height = 8>>=               
plot(b_chaid)
@
\end{center}

\newpage

Benchmark experiment misclassification error CHAID vs.~CTREE\\
(Bachelor thesis by Stefanie Thiemichen)
\begin{center}
\includegraphics{ratiobox}
\end{center}

\newslide{Example: PMML \& SPSS}

Toy PMML example:
<<ex-xml, echo = FALSE>>=
writeLines(c(readLines("pmml.xml")[1:16], "...\n"))
@

\begin{center}
<<ex-pmml, echo = TRUE, fig = TRUE>>=
pm <- pmmlTreeModel("pmml.xml")
plot(pm)
@
\end{center}

\newpage

<<ex-pmml-predict, echo = TRUE>>=
nd <- data.frame(X1 = gl(3, 10), X2 = sample(gl(3, 10)))
predict(pm, newdata = nd)
@

\newslide{What's next?}

Once a stable version of \pkg{partykit} is available from CRAN, we hope that
useRs will start
\begin{itemize}
\item adding new tree algorithms,
\item adding new ensemble methods,
\item adding coercing methods from/to other packages,
\item adding new plot functionality, and generally
\item will use our kit to party harder.
\end{itemize}

\end{document}
